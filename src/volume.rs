use std::fmt;

pub enum Volume {
    Megaliters(f64),
    Kiloliters(f64),
    Liters(f64),
    Deciliters(f64),
    Centiliters(f64),
    Milliliters(f64),
    CubicKilometers(f64),
    CubicMeters(f64),
    CubicDecimeters(f64),
    CubicMillimeters(f64),
    CubicInches(f64),
    CubicFeet(f64),
    CubicYards(f64),
    CubicMiles(f64),
    AcreFeet(f64),
    Bushels(f64),
    Teaspoons(f64),
    Tablespoons(f64),
    FluidOunces(f64),
    Cups(f64),
    Pints(f64),
    Quarts(f64),
    Gallons(f64),
    ImperialTeaspoons(f64),
    ImperialTablespoons(f64),
    ImperialFluidOunces(f64),
    ImperialPints(f64),
    ImperialQuarts(f64),
    ImperialGallons(f64),
    MetricCups(f64),
}

impl Volume {
    pub fn to_liters(&self) -> f64 {
        match *self {
            Volume::Megaliters(value) => value * 1_000_000.0,
            Volume::Kiloliters(value) => value * 1000.0,
            Volume::Liters(value) => value,
            Volume::Deciliters(value) => value * 0.1,
            Volume::Centiliters(value) => value * 0.01,
            Volume::Milliliters(value) => value * 0.001,
            Volume::CubicKilometers(value) => value * 1e12,
            Volume::CubicMeters(value) => value * 1000.0,
            Volume::CubicDecimeters(value) => value,
            Volume::CubicMillimeters(value) => value * 1e-6,
            Volume::CubicInches(value) => value * 0.0163871,
            Volume::CubicFeet(value) => value * 28.3168,
            Volume::CubicYards(value) => value * 764.555,
            Volume::CubicMiles(value) => value * 4.168e+12,
            Volume::AcreFeet(value) => value * 1.233e+6,
            Volume::Bushels(value) => value * 35.2391,
            Volume::Teaspoons(value) => value * 0.00492892,
            Volume::Tablespoons(value) => value * 0.0147868,
            Volume::FluidOunces(value) => value * 0.0295735,
            Volume::Cups(value) => value * 0.24,
            Volume::Pints(value) => value * 0.473176,
            Volume::Quarts(value) => value * 0.946353,
            Volume::Gallons(value) => value * 3.78541,
            Volume::ImperialTeaspoons(value) => value * 0.00591939,
            Volume::ImperialTablespoons(value) => value * 0.0177582,
            Volume::ImperialFluidOunces(value) => value * 0.0284131,
            Volume::ImperialPints(value) => value * 0.568261,
            Volume::ImperialQuarts(value) => value * 1.13652,
            Volume::ImperialGallons(value) => value * 4.54609,
            Volume::MetricCups(value) => value * 0.25,
        }
    }
}

impl fmt::Display for Volume {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Volume::Megaliters(value) => write!(f, "{} Ml", value),
            Volume::Kiloliters(value) => write!(f, "{} kL", value),
            Volume::Liters(value) => write!(f, "{} L", value),
            Volume::Deciliters(value) => write!(f, "{} dL", value),
            Volume::Centiliters(value) => write!(f, "{} cL", value),
            Volume::Milliliters(value) => write!(f, "{} ml", value),
            Volume::CubicKilometers(value) => write!(f, "{} km³", value),
            Volume::CubicMeters(value) => write!(f, "{} m³", value),
            Volume::CubicDecimeters(value) => write!(f, "{} dm³", value),
            Volume::CubicMillimeters(value) => write!(f, "{} mm³", value),
            Volume::CubicInches(value) => write!(f, "{} in³", value),
            Volume::CubicFeet(value) => write!(f, "{} ft³", value),
            Volume::CubicYards(value) => write!(f, "{} yd³", value),
            Volume::CubicMiles(value) => write!(f, "{} mi³", value),
            Volume::AcreFeet(value) => write!(f, "{} acre-ft", value),
            Volume::Bushels(value) => write!(f, "{} bu", value),
            Volume::Teaspoons(value) => write!(f, "{} tsp", value),
            Volume::Tablespoons(value) => write!(f, "{} tbsp", value),
            Volume::FluidOunces(value) => write!(f, "{} fl oz", value),
            Volume::Cups(value) => write!(f, "{} cup", value),
            Volume::Pints(value) => write!(f, "{} pt", value),
            Volume::Quarts(value) => write!(f, "{} qt", value),
            Volume::Gallons(value) => write!(f, "{} gal", value),
            Volume::ImperialTeaspoons(value) => write!(f, "{} tsp", value),
            Volume::ImperialTablespoons(value) => write!(f, "{} tbsp", value),
            Volume::ImperialFluidOunces(value) => write!(f, "{} fl oz", value),
            Volume::ImperialPints(value) => write!(f, "{} pt", value),
            Volume::ImperialQuarts(value) => write!(f, "{} qt", value),
            Volume::ImperialGallons(value) => write!(f, "{} gal", value),
            Volume::MetricCups(value) => write!(f, "{} metric cup", value),
        }
    }
}
